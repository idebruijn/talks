hi

* Prepare a HTTP request

	cfg := NewConfig("/v1/accounts/{a}/projects/{p}", account_id, project_id)

Based on the given contentType (xml,json,text), the payload is marshalled.

	cfg.Content(myStruct, "application/json"")

Others

	cfg.Query("name", "this will be escaped")
	cfg.Header("Content-Encoding","deflate")
	cfg.Body("raw string")
	cfg.BodyReader = fileReader

* Send the HTTP request
	
Package variable for 	
	
	var myAPI = NewClient("https://localhost:8080", new(http.Client))
	
	
Send and receive

	r := myAPI.GET(t, cfg.Build())	
	
Now we have

- *myAPI* *forest.APITesting
- *t*  *testing.T
- *r*  *http.Response
	

* Inspect HTTP response with XML

.code sample.xml

Using a struct

	var doc Book
	ExpectXMLDocument(t,r,&doc)

Using a map

	var doc map[string]interface{}
	ExpectXMLDocument(t,r,&doc)

Using a navigation path

	chapters := XMLPath(t, r, "Book//Chapter")

* Inspect HTTP response with JSON
	
.code sample.json

Using a struct

	var disk Disk
	ExpectJSONDocument(t,r,&disk)

Using a map
	
	ExpectJSONHash(t,r,func(hash map[string]interface{}){
		...
	})

Using a navigation path

	name := JSONPath(t, r, ".Volumes.2.Name")	
	
* Other inspection methdods

	ExpectJSONArray(t,r, func(array []interface{}){...})

	ExpectStatus(t,r, http.StatusNotFound)

	ExpectHeader(t,r, "Accept-Encoding", "gzip")

	Dump(t,r)
	
	
* Testing a testing package

Define the interface for what your are mocking.

.code testing.go  /START OMIT/,/END OMIT/

* Mock it

.code mocked_testing.go /START OMIT/,/END OMIT/

* Testing against a testing service

Setup and run a local HTTP server

.code testable_server.go /START OMIT/,/END OMIT/

* Testing an expectation

.code test_expectStatus.go

* Testing the logging output

.code test_logging.go

* Supporting setup and teardown

	func TestMain(m *testing.M) {
			// do your setup
			
			exitCode := m.Run()
			
			// do your teardown
			
			os.Exit(exitCode)		
	}

* Using the api for setup

inside TestMain there is no *testing.T

	func TestMain(m *testing.M) {		
		
		// prepare the resources under test
		
		t := forest.TestingT
		r := yourApi.POST(t, ...)
		if ExpectStatus(t, r, 204) {
			m.Run()	
		}
		os.Exit(1)
	}		